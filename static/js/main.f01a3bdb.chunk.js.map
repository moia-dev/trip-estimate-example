{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","origin","dest","estimate","zoom","attribute","event","deltaObj","target","value","this","setState","latLng","position","lat","parseFloat","toFixed","lon","data","fetch","method","headers","body","JSON","stringify","then","response","json","catch","err","console","log","currency","price","Card","className","CardContent","Typography","variant","component","amountMin","amountMax","etaMin","etaMax","href","deepLink","destination","center","height","onClick","handlePositionSelection","anchor","isEstimate","data-ribbon","title","CssBaseline","Container","maxWidth","renderMap","noValidate","autoComplete","TextField","id","label","margin","type","InputProps","readOnly","Button","color","handleGetEstimate","renderEstimate","clearEstimate","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f01a3bdb.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Map from 'pigeon-maps'\nimport Marker from 'pigeon-marker'\nimport 'github-fork-ribbon-css/gh-fork-ribbon.css'\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            origin: null,\n            dest: null,\n            estimate: null,\n            zoom: 13,\n        };\n    }\n\n    handleChange(attribute, event) {\n        let deltaObj = {};\n        deltaObj[attribute] = event.target.value;\n        this.setState(deltaObj);\n    }\n\n    handlePositionSelection(latLng) {\n        let position = {\n            lat: parseFloat(latLng[0].toFixed(6)),\n            lon: parseFloat(latLng[1].toFixed(6))\n        };\n\n        if (this.state.origin === null) {\n            this.setState({origin: position})\n        } else if(this.state.dest === null) {\n            this.setState({dest: position})\n        }\n    }\n\n    handleGetEstimate(origin, dest) {\n        let data = {\n            \"origin\": {\n                \"lat\": origin.lat,\n                \"lon\": origin.lon\n            },\n            \"destination\": {\n                \"lat\": dest.lat,\n                \"lon\": dest.lon\n            }\n        };\n\n        fetch(\"https://trip-estimate.api.trip.prd.moia-group.io/estimate\", {\n            //mode: \"no-cors\",\n            method: \"POST\",\n            headers: {\n                \"accept\": \"application/json\",\n                \"content-type\": \"application/json\",\n                \"x-api-key\": \"qh2ki8YGx36cersQZpf245uDUxdERWjz8NSue7Cz\"\n            },\n            body: JSON.stringify(data)\n        })\n            .then(response => {\n                return response.json();\n            })\n            .then(estimate => {\n                this.setState({estimate: estimate});\n            })\n            .catch(err => {\n                console.log(err);\n            });\n    }\n\n    clearEstimate() {\n        this.setState({estimate: null, origin: null, dest: null});\n    }\n\n    renderEstimate() {\n        let currency = this.state.estimate.price.currency;\n        return (\n            <Card className=\"card\">\n                <CardContent>\n                    <Typography className=\"trip-title\" variant=\"h5\" component=\"h2\">Trip:</Typography>\n                    <Typography component=\"div\">Price: {this.state.estimate.price.amountMin} - {this.state.estimate.price.amountMax} {currency}</Typography>\n                    <Typography component=\"div\">ETA: {this.state.estimate.etaMin} - {this.state.estimate.etaMax} Minutes</Typography>\n                    <Typography component=\"a\" href={this.state.estimate.deepLink}>Take me to MOIA</Typography>\n                </CardContent>\n            </Card>\n        );\n    }\n\n    renderMap() {\n        const origin = this.state.origin && [this.state.origin.lat, this.state.origin.lon];\n        const destination = this.state.dest && [this.state.dest.lat, this.state.dest.lon];\n        const center = [53.567137,9.9948631];\n        return (\n            <Map center={center} zoom={12.67} height={400} onClick={(event) => this.handlePositionSelection(event.latLng)} >\n                {origin && <Marker anchor={origin} />}\n                {destination && <Marker anchor={destination} />}\n            </Map>\n        )\n    }\n\n    render() {\n        let isEstimate = this.state.estimate !== null;\n        return (\n            <div className=\"App\">\n                <a className=\"github-fork-ribbon\" href=\"https://github.com/moia-dev/trip-estimate-example\" data-ribbon=\"Fork me on GitHub\"\n                   title=\"Fork me on GitHub\">Fork me on GitHub</a>\n\n                <CssBaseline />\n\n                <Container maxWidth=\"sm\">\n\n                    <Card className=\"card\">\n                        {this.renderMap()}\n                        <form noValidate autoComplete=\"off\">\n                            <div>\n                                <TextField\n                                    id=\"origin-lat\"\n                                    label=\"Origin Latitude\"\n                                    className=\"textField\"\n                                    margin=\"normal\"\n                                    type=\"number\"\n                                    value={(this.state.origin && this.state.origin.lat) || \"\"}\n                                    InputProps={{\n                                        readOnly: true,\n                                    }}\n                                />\n                                <TextField\n                                    id=\"origin-lon\"\n                                    label=\"Origin Longitude\"\n                                    className=\"textField\"\n                                    margin=\"normal\"\n                                    type=\"number\"\n                                    value={(this.state.origin && this.state.origin.lon) || \"\"}\n                                    InputProps={{\n                                        readOnly: true,\n                                    }}\n                                />\n                            </div>\n                            <div>\n                                <TextField\n                                    id=\"dest-lat\"\n                                    label=\"Destination Latitude\"\n                                    className=\"textField\"\n                                    margin=\"normal\"\n                                    type=\"number\"\n                                    value={(this.state.dest && this.state.dest.lat) || \"\"}\n                                    InputProps={{\n                                        readOnly: true,\n                                    }}\n                                />\n                                <TextField\n                                    id=\"dest-lon\"\n                                    label=\"Destination Longitude\"\n                                    className=\"textField\"\n                                    margin=\"normal\"\n                                    type=\"number\"\n                                    value={(this.state.dest && this.state.dest.lon) || \"\"}\n                                    InputProps={{\n                                        readOnly: true,\n                                    }}\n                                />\n                            </div>\n                        </form>\n                    </Card>\n\n                    {!isEstimate &&\n                        <Button variant=\"contained\" color=\"primary\" onClick={event => this.handleGetEstimate(this.state.origin, this.state.dest)}>\n                            Get Estimate\n                        </Button>\n                    }\n\n                    {isEstimate && this.renderEstimate()}\n                    {isEstimate &&\n                        <Button variant=\"contained\" color=\"primary\" onClick={event => this.clearEstimate()}>\n                            Reset\n                        </Button>\n                    }\n\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}