{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","originLat","originLon","destLat","destLon","estimate","attribute","event","deltaObj","target","value","this","setState","data","fetch","method","headers","body","JSON","stringify","then","response","json","catch","err","console","log","currency","price","Card","className","id","amountMin","amountMax","etaMin","etaMax","href","deepLink","isEstimate","CssBaseline","Container","maxWidth","noValidate","autoComplete","TextField","label","margin","type","onChange","handleChange","Button","variant","color","onClick","handleGetEstimate","renderEstimate","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.51b0d85a.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport Card from '@material-ui/core/Card';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            originLat: 53.580748,\n            originLon: 10.0098,\n            destLat: 53.551324,\n            destLon: 9.986031,\n            estimate: null\n        };\n    }\n\n    handleChange(attribute, event) {\n        let deltaObj = {};\n        deltaObj[attribute] = event.target.value;\n        this.setState(deltaObj);\n    }\n\n    handleGetEstimate(originLat, originLon, destLat, destLon) {\n        let data = {\n            \"origin\": {\n                \"lat\": originLat,\n                \"lon\": originLon\n            },\n            \"destination\": {\n                \"lat\": destLat,\n                \"lon\": destLon\n            }\n        };\n\n        fetch(\"https://trip-estimate.api.trip.prd.moia-group.io/estimate\", {\n            //mode: \"no-cors\",\n            method: \"POST\",\n            headers: {\n                \"accept\": \"application/json\",\n                \"content-type\": \"application/json\"\n            },\n            body: JSON.stringify(data)\n        })\n            .then(response => {\n                return response.json();\n            })\n            .then(estimate => {\n                this.setState({estimate: estimate});\n            })\n            .catch(err => {\n                console.log(err);\n            });\n    }\n\n    clearEstimate() {\n        this.setState({estimate: null});\n    }\n\n    renderEstimate() {\n        let currency = this.state.estimate.price.currency;\n        return (\n            <Card className=\"card\">\n                <h2 id=\"simple-modal-title\">Trip</h2>\n                <p id=\"simple-modal-description\">\n                    <div>Price {this.state.estimate.price.amountMin} - {this.state.estimate.price.amountMax} {currency}</div>\n                    <div>ETA {this.state.estimate.etaMin} - {this.state.estimate.etaMax} Minutes</div>\n                    <a href={this.state.estimate.deepLink}>Take me to MOIA</a>\n                </p>\n            </Card>\n        );\n    }\n\n    render() {\n        let isEstimate = this.state.estimate !== null;\n        return (\n            <div className=\"App\">\n\n                <CssBaseline />\n\n                <Container maxWidth=\"sm\">\n\n                    <Card className=\"card\">\n                        <form noValidate autoComplete=\"off\">\n                            <div>\n                                <TextField\n                                    id=\"origin-lat\"\n                                    label=\"Origin Latitude\"\n                                    className=\"textField\"\n                                    margin=\"normal\"\n                                    type=\"number\"\n                                    value={this.state.originLat}\n                                    onChange={event => this.handleChange(\"originLat\", event)}\n                                />\n                                <TextField\n                                    id=\"origin-lon\"\n                                    label=\"Origin Longitude\"\n                                    className=\"textField\"\n                                    margin=\"normal\"\n                                    type=\"number\"\n                                    value={this.state.originLon}\n                                    onChange={event => this.handleChange(\"originLon\", event)}\n                                />\n                            </div>\n                            <div>\n                                <TextField\n                                    id=\"dest-lat\"\n                                    label=\"Destination Latitude\"\n                                    className=\"textField\"\n                                    margin=\"normal\"\n                                    type=\"number\"\n                                    value={this.state.destLat}\n                                    onChange={event => this.handleChange(\"destLat\", event)}\n                                />\n                                <TextField\n                                    id=\"dest-lon\"\n                                    label=\"Destination Longitude\"\n                                    className=\"textField\"\n                                    margin=\"normal\"\n                                    type=\"number\"\n                                    value={this.state.destLon}\n                                    onChange={event => this.handleChange(\"destLon\", event)}\n                                />\n                            </div>\n                        </form>\n                    </Card>\n\n                    {!isEstimate &&\n                        <Button variant=\"contained\" color=\"primary\" onClick={event => this.handleGetEstimate(this.state.originLat, this.state.originLon, this.state.destLat, this.state.destLon)}>\n                            Get Estimate\n                        </Button>\n                    }\n\n                    {isEstimate && this.renderEstimate()}\n\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}